#+TITLE: Emacs Conf
#+AUTHOR: Richard Hunter


:PROPERTIES:
:VISIBILITY: children
:END:

#+begin_src emacs-lisp :tangle lisp/common.el
  ;; supress debugger by default
  ;; (setq debug-on-error t)
  (setq user-full-name "Richard Hunter"
        user-mail-address "")
#+end_src

* Quick Links
- [[Org Mode][Org Mode]]
- [[JavaScript][JavaScript]]

* Out of Band Deps
- plantuml (jar file)
- nerd fonts (monospace for terminal)
- git
- nodejs
- typescript toolchain
- copilot lang server
- rust toolchain
- python toolchain
- go toolchain

#+begin_src bash
  /Users/<user>/.nvm/versions/node/v20.np15.0/lib
├── @devcontainers/cli@0.71.0
├── @techdocs/cli@1.8.19
├── corepack@0.28.0
├── eslint@8.57.1
├── npm@10.7.0
├── prettier@3.3.3
├── pyright@1.1.384
├── typescript-language-server@4.3.3
├── typescript@5.3.3
├── yaml-language-server@1.15.0
└── yarn@1.22.22
#+end_src

* Early Init
See early-init.org

* Startup Config
** Basic Internals

- set default window sizes for GUI emacs
#+begin_src emacs-lisp :tangle lisp/common.el
  ; (setq package-enable-at-startup nil)
  (setq frame-inhibit-implied-resize t)

  ;; (if (fboundp 'fringe-mode) (set-fringe-mode 0))
  (if (display-graphic-p)
      (progn
        (setq initial-frame-alist
              '(
                (tool-bar-lines . 0)
                (width . 180) ; chars
                (height . 80) ; lines
                (left . 0)
                (vertical-scroll-bars . nil)
                (horizontal-scroll-bars . nil)
                (top . 20)))
        (setq default-frame-alist
              '(
                (width . 180)
                (height . 80)
                (left . 0)
                (top . 20)
                (vertical-scroll-bars . nil)
                (horizontal-scroll-bars . nil)
                (tool-bar-lines . 0))))
    (progn
      (setq initial-frame-alist '( (tool-bar-lines . 0)))
      (setq default-frame-alist '( (tool-bar-lines . 0)))))
#+end_src

** Macros
#+begin_src emacs-lisp :tangle lisp/common.el

  ;; Taken from Prot
  (defmacro rh-emacs-keybind (keymap &rest definitions)
    "Expand key binding DEFINITIONS for the given KEYMAP.
  DEFINITIONS is a sequence of string and command pairs."
    (declare (indent 1))
    (unless (zerop (% (length definitions) 2))
      (error "Uneven number of key+command pairs"))
    (let ((keys (seq-filter #'stringp definitions))
          ;; We do accept nil as a definition: it unsets the given key.
          (commands (seq-remove #'stringp definitions)))
      `(when-let (((keymapp ,keymap))
                  (map ,keymap))
         ,@(mapcar
            (lambda (pair)
              (unless (and (null (car pair))
                           (null (cdr pair)))
                `(define-key map (kbd ,(car pair)) ,(cdr pair))))
            (cl-mapcar #'cons keys commands)))))

  ;; Sample of `rh-emacs-keybind'

  ;; (rh-emacs-keybind global-map
  ;;   "C-z" nil
  ;;   "C-x b" #'switch-to-buffer
  ;;   "C-x C-c" nil
  ;;   "C-x k" #'kill-buffer)

#+end_src

** Repeat mode
#+begin_src emacs-lisp :tangle lisp/common.el
  ;;; Repeatable key chords (repeat-mode)
  (setq repeat-on-final-keystroke t
        repeat-exit-timeout 3
        repeat-exit-key "<escape>"
        repeat-keep-prefix nil
        repeat-check-key t
        repeat-echo-function 'ignore
        ;; Technically, this is not in repeal.el, though it is the
        ;; same idea.
        set-mark-command-repeat-pop t)
  (repeat-mode 1)
#+end_src

** GUI Emacs add env path for gui
Set PATH for GUI emacs
#+begin_src emacs-lisp :tangle lisp/common.el
  (setq exec-path (append exec-path '("/usr/local/bin")))
  (setq exec-path (append exec-path '("/opt/homebrew/bin")))
  (setq exec-path (append exec-path '("/opt/homebrew/lib")))
  (setq exec-path (append exec-path '("/opt/homebrew/lib/gcc/14")))
  (setq exec-path (append exec-path '("/opt/homebrew/sbin")))
  (setq exec-path (append exec-path '("/Users/hunterri/go/bin")))
  (setq exec-path (append exec-path '("/Users/hunterri/.cargo/bin")))
  (setq exec-path (append exec-path '("/Users/hunterri/.nvm/versions/node/v20.15.0/bin")))
  (setq exec-path (append exec-path '("/Users/hunterri/.pyenv/shims")))

  (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
  (setenv "PATH" (concat (getenv "PATH") ":/opt/homebrew/bin"))
  (setenv "PATH" (concat (getenv "PATH") ":/opt/homebrew/lib"))
  (setenv "PATH" (concat (getenv "PATH") ":/opt/homebrew/lib/gcc/14"))
  (setenv "PATH" (concat (getenv "PATH") ":/opt/homebrew/sbin"))
  (setenv "PATH" (concat (getenv "PATH") ":/Users/hunterri/go/bin"))
  (setenv "PATH" (concat (getenv "PATH") ":/Users/hunterri/.cargo/bin"))
  (setenv "PATH" (concat (getenv "PATH") ":/Users/hunterri/.pyenv/shims"))
  (setenv "PATH" (concat (getenv "PATH") ":/Users/hunterri/.nvm/versions/node/v20.15.0/bin"))
#+end_src

Require some internal libs
#+begin_src emacs-lisp :tangle lisp/common.el

  (require 'paren)

#+end_src

Activate some internal features
- auto-compression:: automatically handle decompressing/compressing of zipped files
- column-number-mode:: display column number in the mode line
- global-auto-revert-mode:: automatically update buffers when they are changed on disk
- global-font-lock-mode:: syntax highlighting
- global-hl-line-mode:: enables highlighting
- display-line-number-mode:: display line numbers by default. See section on Line Numbers for a list of modes where this is disabled
- show-paren-mode:: highlight matching parens/brackets etc
- transient-mark-mode:: highlighting regions
- which-function-mode:: display current function name in the mode line (TODO: disabled for causing errors)

#+begin_src emacs-lisp :tangle lisp/common.el
  (auto-compression-mode 1)
  (column-number-mode 1)
  (setq auto-revert-verbose t)
  (global-auto-revert-mode 1)
  (global-font-lock-mode 1)
  (global-hl-line-mode 1)
  ;; Lately I've come to dislike line numbers unless pair programming, so leave off
  ;; (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'relative)
  (show-paren-mode 1)
  (transient-mark-mode 1)
  ;; (which-function-mode 1)
  ;;;; Delete selection
  (delete-selection-mode 1)
#+end_src

No need to backup. Let's be brave.

#+begin_src emacs-lisp :tangle lisp/common.el
  (setq backup-inhibited t
        make-backup-files nil
        auto-save-default nil
        create-lockfiles nil)
#+end_src


Location and settings for temp files
- Don't delink hardlinks
- Use version numbers on backups
- Automatically delete excess backuos
- Keep only 20 versions
- Keep only 5 old versions

#+begin_src emacs-lisp :tangle lisp/common.el
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
      backup-by-copying t
      version-control t
      delete-old-versions t
      kept-new-versions 20
      kept-old-versions 5)
#+end_src

Warn when opening files over 150MB
(q)
#+begin_src emacs-lisp :tangle lisp/common.el
  (setq-default large-file-warning-threshold 150000000)
#+end_src

Startup message setup

#+begin_src emacs-lisp :tangle lisp/common.el
(setq initial-scratch-message (format ";; Scratch buffer - started on %s\n\n" (current-time-string)))

#+end_src

Uniquify the buffer's name
#+begin_src emacs-lisp :tangle lisp/common.el
(setq uniquify-buffer-name-style 'forward uniquify-separator "/")
#+end_src

Reset some standard keybindings
#+begin_src emacs-lisp :tangle lisp/common.el
    ;; In GUI emacs, C-z minimizes window, which is useless.
    (if (display-graphic-p)
        (global-unset-key (kbd "C-z")))
#+end_src

Auto refresh buffers
#+begin_src emacs-lisp :tangle lisp/common.el
  (global-auto-revert-mode 1)
#+end_src

#+begin_src emacs-lisp :tangle lisp/common.el
  ;; Disable the *Messages* Buffer
  ;; (setq-default message-log-max nil)
  ;; (kill-buffer "*Messages*")

  ;; Disable the *Completions* buffer
  (add-hook 'minibuffer-exit-hook
            (lambda ()
               (let ((buffer "*Completions*"))
                 (and (get-buffer buffer)
                      (kill-buffer buffer)))))
#+end_src

Kill all processes automatically on exit w/out prompting
#+begin_src emacs-lisp :tangle lisp/common.el
  (setq confirm-kill-processes nil)
#+end_src

Open file system read-only files as read-only in Emacs as well
#+begin_src emacs-lisp :tangle lisp/common.el
  (setq view-read-only t)
#+end_src

** UX Customizations
#+begin_src emacs-lisp :tangle lisp/common.el
    ;; don't auto split vertically
  (setq split-height-threshold nil)

  ;; (require 'move-text)
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; replace line wrap char with whitespace
  (set-display-table-slot standard-display-table 'wrap ?\ )

  ;; Disable tab characters in indentation
  (setq-default indent-tabs-mode nil)

  ;; Remove extra check for killing processes
  (setq confirm-kill-processes nil)

  ;; Don't ring the bell
  (setq ring-bell-function 'ignore)

  ;; default font
  (set-frame-font "Menlo 14" nil t)

  ;; scale text in smallerl steps
  ;; (setq text-scale-mode-step 1.1)

  ;; set face size of minibuffer
  (add-hook 'minibuffer-setup-hook 'my-minibuffer-setup)
  (defun my-minibuffer-setup ()
    (set (make-local-variable 'face-remapping-alist)
         '((default :height 1.2))))

;; Remove the arrow indicator for truncated lines
(setq-default fringe-indicator-alist
             (cons '(truncation nil nil)
                   (assq-delete-all 'truncation (default-value 'fringe-indicator-alist))))

#+end_src


*** Line Wrapping

In =prog-mode= prefer that lines extend beyond the window frame instead of wrapping.

#+begin_src emacs-lisp :tangle lisp/hooks.el
      (add-hook 'prog-mode-hook (lambda ()
                                  (setq truncate-lines t)
                                  (visual-line-mode -1)))
#+end_src

* Package System Setup
** Setup the package manager

*** Configure =use-package=

#+begin_src emacs-lisp :tangle lisp/packages.el

    ;; Configure `use-package' prior to loading it.
    (eval-and-compile
      (setq use-package-always-ensure nil)
      ;;(setq use-package-always-defer nil)
      (setq use-package-always-demand nil)
      ;; Toggle to view errors with use-package
      (setq use-package-expand-minimally t)
      ;; (setq use-package-enable-imenu-support t)
      (setq use-package-compute-statistics nil)
      ;; The following is VERY IMPORTANT.  Write hooks using their real name
      ;; instead of a shorter version: after-init ==> `after-init-hook'.
      (setq use-package-hook-name-suffix nil))


  ;; Uncomment this to get a reading on packages that get loaded at startup
  (setq use-package-verbose t)
#+end_src


#+begin_src emacs-lisp :tangle lisp/packages.el

  (add-to-list 'load-path "~/.emacs.d/straight/build")

#+end_src

* Appearance & UI
** Mouse & Scroll Preferences
Enable smooth scroll and scroll window under mouse

#+begin_src emacs-lisp :tangle lisp/common.el
  (setq hscroll-step 1)
  (setq scroll-conservatively 1000)
  (setq mouse-wheel-follow-mouse 't)
  (setq use-dialog-box t)               ; only for mouse events
  (setq use-file-dialog nil)

  ;; smooth scroll (requires emacs 29)
  ;; still cant tell if it makes me dizzy...
  (setq pixel-scroll-precision-mode t)
#+end_src

** Extended Display Preferences
- Set default size of the window frame on load
- Padding between buffer and line number
#+begin_src emacs-lisp :tangle lisp/common.el
; (setq initial-frame-alist '((top . 20) (left . 300) (width . 180) (height . 70)))
(setq linum-format "%d ")
#+end_src

** OSX Specific Settings
Improve appearance of title bar on osx GUI emacs, white on black
#+begin_src emacs-lisp :tangle lisp/common.el
  (add-to-list 'initial-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'initial-frame-alist '(ns-appearance . dark))
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
#+end_src

** Cursory
Lightweight package for easily creating cursor presets
#+begin_src emacs-lisp :tangle lisp/packages.el
   (use-package cursory)
   (setq cursory-presets
          '((bar
             :cursor-type (bar . 2)
             :cursor-in-non-selected-windows hollow
             :blink-cursor-blinks 10
             :blink-cursor-interval 0.5
             :blink-cursor-delay 0.2)
            (box
             :cursor-type box
             :cursor-in-non-selected-windows hollow
             :blink-cursor-blinks 10
             :blink-cursor-interval 0.5
             :blink-cursor-delay 0.2)
            (underscore
             :cursor-type (hbar . 3)
             :cursor-in-non-selected-windows hollow
             :blink-cursor-blinks 50
             :blink-cursor-interval 0.2
             :blink-cursor-delay 0.2)))
  (setq cursory-latest-state-file (locate-user-emacs-file "cursory-latest-state"))
  ;; Set last preset or fall back to desired style from `cursory-presets'.
  (cursory-set-preset (or (cursory-restore-latest-preset) 'bar))
  ;; The other side of `cursory-restore-latest-preset'.
  (add-hook 'kill-emacs-hook #'cursory-store-latest-preset)
  ;; We have to use the "point" mnemonic, because C-c c is often the
  ;; suggested binding for `org-capture'.
  (define-key global-map (kbd "C-c p") #'cursory-set-preset)
#+end_src


** GitGutters
IDE style gutters: https://ianyepan.github.io/posts/emacs-git-gutter/
#+begin_src emacs-lisp :tangle lisp/packages.el
(use-package git-gutter
  :hook (prog-mode . git-gutter-mode)
  :config
  (setq git-gutter:update-interval 0.1))

(use-package git-gutter-fringe
  :config
  (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))
#+end_src

** Popper.el
Cool thing that helps with window management

#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package popper
  :ensure t ; or :straight t
  :bind (("C-`"   . popper-toggle)
         ("M-`"   . popper-cycle)
         ("C-M-`" . popper-toggle-type))
  :init
  (setq popper-reference-buffers
        '("\\*Messages\\*"
          "Output\\*$"
          "\\*Async Shell Command\\*"
          help-mode
          compilation-mode))
  (popper-mode +1)
  (popper-echo-mode +1))
#+end_src

** Themes
EF Themes
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package ef-themes
    ;; load some random ef-theme
    :bind ("<f6>" . ef-themes-load-random))
#+end_src

Standard Themes
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package standard-themes)
#+end_src


Configure =modus-vivendi= theme and other themes.
Manual and configuration details can be found [[https://protesilaos.com/modus-themes][here]].
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package modus-themes
    :init
    (setq modus-themes-slanted-constructs t
          modus-themes-bold-constructs nil
          modus-themes-subtle-line-numbers t
          modus-themes-fringes 'subtle
          modus-themes-completions (quote ((matches . (background intense))
                  (selection . (accented intense))
                  (popup . (accented))))
          modus-themes-mode-line '(padding accented 3d)
          modus-themes-org-agenda
          '((header-block . (variable-pitch scale-title))
            (header-date . (grayscale workaholic bold-today))
            (scheduled . uniform))
          ))
#+end_src

I like =doom-themes= also...
#+begin_src emacs-lisp :tangle lisp/packages.el
    (use-package doom-themes
      :demand t)
#+end_src

Humanoid themes
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package humanoid-themes)
#+end_src

Declare all themes as safe
#+begin_src emacs-lisp :tangle lisp/packages.el
  (setq custom-safe-themes t)
#+end_src

** Default Theme
Set the default theme here:
#+begin_src emacs-lisp :tangle lisp/packages.el
  (load-theme 'ef-dream)
#+end_src

** Tab Bar
Don't show the buttons on tabs
#+begin_src emacs-lisp :tangle lisp/common.el
  (setq tab-bar-close-button-show nil)
  (setq tab-bar-new-button-show nil)
#+end_src

Customize Tab Bar face
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (set-face-attribute 'tab-bar-tab nil :overline "dark cyan" :box nil)
#+end_src


** Modeline
- TODO: customize modeline, see below (however, liking =doom-modeline=)
- [[https://occasionallycogent.com/custom_emacs_modeline/index.html][Customizing Modeline]]

  =doom-modeline= is a very sensible default modeline, so sticking with it for a while
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package doom-modeline
  :config (doom-modeline-mode))
#+end_src

=doom-modeline= requires =nerd-fonts=
#+begin_src emacs-lisp :tangle lisp/packages.el
  (straight-use-package '(nerd-fonts :type git :host github :repo "twlz0ne/nerd-fonts.el"))
#+end_src



** Buffer Display
- an =alist= is just a "list of lists" in elisp
- each element in the list takes the form:

#+begin_src
     ( BUFFER-MATCHER
       LIST-OF-DISPLAY-FUNCTIONS
       PARAMETERS)
#+end_src

See [[https://protesilaos.com/codelog/2024-02-08-emacs-window-rules-display-buffer-alist/][this video]] for a nice tutorial on setting this variable.

#+begin_src emacs-lisp :tangle lisp/common.el
  (setq display-buffer-alist
      '(
        ;; no window
        ("\\`\\*Async Shell Command\\*\\'"
         (display-buffer-no-window))

        ("\\`\\*\\(Warnings\\|Compile-Log\\|Org Links\\)\\*\\'"
         (display-buffer-no-window)
         (allow-no-window . t))

        ("\\*vterm\\*"
         (display-buffer-reuse-mode-window)
         (dedicated . t))

        ("\\*Org \\(Select\\|Note\\)\\*" ; the `org-capture' key selection and `org-add-log-note'
           (display-buffer-in-side-window)
           (dedicated . t)
           (side . bottom)
           (slot . 0)
           (window-parameters . ((mode-line-format . none))))

        ;; bottom buffer (NOT side window)
        ((or . ((derived-mode . flymake-diagnostics-buffer-mode)
                (derived-mode . flymake-project-diagnostics-mode)
                (derived-mode . messages-buffer-mode)
                (derived-mode . backtrace-mode)))
         (display-buffer-reuse-mode-window display-buffer-at-bottom)
         (window-height . 0.3)
         (dedicated . t)
         (preserve-size . (t . t)))

        ("\\*Occur\\*"
         ;; list of display functions
         (display-buffer-reuse-mode-window
          display-buffer-below-selected)
         ;; Parameters
         (window-height . fit-window-to-buffer)
         (dedicated . t)
         )

        ))
#+end_src

* Custom Utility Functions
Here we add custom utility functions

#+begin_src emacs-lisp :tangle lisp/common.el
  ;; Remove tabs
  (defun untabify-buffer ()
    (interactive)
    (untabify (point-min) (point-max)))

  ;; Indent a region
  (defun indent-buffer ()
    (interactive)
    (indent-region (point-min) (point-max)))

  (defun cleanup-buffer ()
    "Perform a bunch of operations on the whitespace content of a buffer.
    Including indent-buffer, which should not be called automatically on save."
    (interactive)
    (untabify-buffer)
    (delete-trailing-whitespace)
    (indent-buffer))

  (defun func/open-package-installer ()
    (interactive)
    (package-refresh-contents)
    (package-list-packages))
#+end_src

* Custom Keybindings
** Configuration
- Make ESC quit prompts
- set modifier keys for Apple keyboard, for emacs in OS X
#+begin_src emacs-lisp :tangle lisp/keybindings.el

(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(setq mac-command-modifier 'super) ; make cmd key do super
(setq ns-function-modifier 'hyper)  ; make Fn key do Hyper
#+end_src

** Function Key Bindings

#+begin_src emacs-lisp :tangle lisp/keybindings.el
  ;; [F1] -- Go to a specific line number in the current buffer (file)
  (global-set-key [f1] 'goto-line)

  ;; [F2] -- Comment out a Marked (highlighted) region of text
  (global-set-key [f2] 'comment-region)

  ;; [F3] -- Comment out a Marked (highlighted) region of text
  (global-set-key [f3] 'uncomment-region)

  ;; [F4] -- Cleanup all trailing whitespace
  (global-set-key [f4] 'whitespace-cleanup)

  ;; [F5] -- Switch to next buffer (file), burying current
  (global-set-key [f5] 'bury-buffer)

  ;; [F8] -- Toggle Treemacs
  (global-set-key [f8] 'treemacs)

  ;; [F12] -- Toggle Breakpoint
  ;; (global-set-key [f12] 'dap-breakpoint-toggle)
#+end_src

** Marking Regions and Navigating
#+begin_src emacs-lisp :tangle lisp/keybindings.el
  ;; [Ctrl+c -> TAB] -- Mark the entire file
  ;; Hint: Useful for auto-formatting the entire file by pressing (Ctrl+c -> TAB -> TAB)
  (global-set-key (kbd "C-c TAB") 'mark-whole-buffer)
  (global-set-key (kbd "<C-s-up>")     'buf-move-up)
  (global-set-key (kbd "<C-s-down>")   'buf-move-down)
  (global-set-key (kbd "<C-s-left>")   'buf-move-left)
  (global-set-key (kbd "<C-s-right>")  'buf-move-right)
  (global-set-key (kbd "M-n") (lambda() (interactive) (scroll-up 1)))
  (global-set-key (kbd "M-p") (lambda() (interactive) (scroll-down 1)))
#+end_src

** Additional Key Bindings

#+begin_src emacs-lisp :tangle lisp/keybindings.el
    ;; [Ctrl+c -> l -- Org store link]
    ;; [Ctrl+c -> a -- Org open agenda]
    (define-key global-map "\C-cl" 'org-store-link)
    (define-key global-map "\C-ca" 'org-agenda)
      (global-set-key "\C-cc" 'org-capture)
    (global-set-key "\C-cb" 'org-switchb)
    (setq org-log-done t)

    (global-set-key (kbd "C-c i") 'func/open-package-installer)

    ;; [Ctrl+c -> TAB] -- Mark the entire file
    ;; Hint: Useful for auto-formatting the entire file by pressing (Ctrl+c -> TAB -> TAB)
    (global-set-key (kbd "C-c TAB") 'mark-whole-buffer)

    ;; [Ctrl+x -> Ctrl+b -- Open iBuffer instead of buffers]
    (global-set-key (kbd "C-x C-b")  'ibuffer)

    ;; By default, killing a word backward will put it in the ring, I don't want this
    (defun backward-kill-word-noring (arg)
      (interactive "p")
      (let ((kr kill-ring))
        (backward-kill-word arg)
        (setq kill-ring (reverse kr))))

    (global-set-key (kbd "C-M-<backspace>") 'backward-kill-word-noring)

    ;; Special keys
    (customize-set-variable mac-right-option-modifier nil)
    (customize-set-variable mac-command-modifier 'super)
    (customize-set-variable ns-function-modifier 'hyper)

  (rh-emacs-keybind global-map
     "C-c C-z" nil
      "C-h h" nil
      "M-`" nil
      "M-z" #'zap-up-to-char ; NOT `zap-to-char'
      "C-h K" #'describe-keymap ; overrides `Info-goto-emacs-key-command-node'
      "M-o" #'delete-blank-lines   ; alias for C-x C-o
      "C-x k" #'kill-buffer)

    ;; Keybinds
    (global-set-key (kbd "s-W") 'delete-frame) ; ⌘-W = Close window
    (global-set-key (kbd "s-}") 'tab-bar-switch-to-next-tab) ; ⌘-} = Next tab
    (global-set-key (kbd "s-{") 'tab-bar-switch-to-prev-tab) ; ⌘-{ = Previous tab
    (global-set-key (kbd "s-t") 'tab-bar-new-tab) ;⌘-t = New tab
    (global-set-key (kbd "s-w") 'tab-bar-close-tab) ; ⌘-w = Close tab

    (unless (< emacs-major-version 28)
      (global-set-key (kbd "s-Z") 'undo-redo)) ; ⌘-Z = Redo
#+end_src

** DWIM Commands

#+begin_src emacs-lisp :tangle lisp/keybindings.el
  (defun rh/keyboard-quit-dwim ()
    "Do-What-I-Mean behaviour for a general `keyboard-quit'.

  The generic `keyboard-quit' does not do the expected thing when
  the minibuffer is open.  Whereas we want it to close the
  minibuffer, even without explicitly focusing it.

  The DWIM behaviour of this command is as follows:

  - When the region is active, disable it.
  - When a minibuffer is open, but not focused, close the minibuffer.
  - When the Completions buffer is selected, close it.
  - In every other case use the regular `keyboard-quit'."
    (interactive)
    (cond
     ((region-active-p)
      (keyboard-quit))
     ((derived-mode-p 'completion-list-mode)
      (delete-completion-window))
     ((> (minibuffer-depth) 0)
      (abort-recursive-edit))
     (t
      (keyboard-quit))))

  (define-key global-map (kbd "C-g") #'rh/keyboard-quit-dwim)

#+end_src

* Completions
** Orderless & Helm
Install and configure =orderless= a completetions framework helper. I use it in tandem with the built-in =icomplete=.
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package orderless
    :config
    (setq completion-styles '(orderless basic)))
    #+end_src


#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package helm)
#+end_src


* Minibuffer
** Vertico
Lists minibuffer completion options vertically as opposed to a grid
- https://github.com/minad/vertico
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package vertico
  :custom
  (vertico-scroll-margin 0) ;; Different scroll margin
  (vertico-count 15) ;; Show more candidates
  (vertico-resize nil) ;; Grow and shrink the Vertico minibuffer
  (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
  :init
  (vertico-mode))
#+end_src

** Marginalia
Provides rich information in minibuffer for various commands
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package marginalia
    :init
    (marginalia-mode))
#+end_src

* Consult
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package consult
    :bind (;; A recursive grep
           ("M-s M-g" . consult-grep)
           ;; Search for files names recursively
           ("M-s M-f" . consult-find)
           ;; Search through the outline (headings) of the file
           ("M-s M-o" . consult-outline)
           ;; Search the current buffer
           ("M-s M-l" . consult-line)
           ;; Switch to another buffer, or bookmarked file, or recently
           ;; opened file.
           ("M-s M-b" . consult-buffer)))
#+end_src

* Magit
Set up =magit= and launch it with ~C-x g~
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package magit)

  ;; Don't ask me to save unsaved buffers on every action
  (setq magit-save-repository-buffers nil)
#+end_src

#+begin_src emacs-lisp :tangle lisp/keybindings.el
  (global-set-key (kbd "C-x g") 'magit-status)
#+end_src

** Configure ediff
#+begin_src emacs-lisp :tangle lisp/common.el
  (custom-set-variables
   '(ediff-split-window-function (quote split-window-horizontally)))
#+end_src

* Multiple Cursors
https://github.com/magnars/multiple-cursors.el

#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package multiple-cursors
    :bind (("H-SPC" . set-rectangular-region-anchor)
           ("C-M-SPC" . set-rectangular-region-anchor)
           ("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-c C->" . mc/mark-all-like-this)
           ("C-c C-SPC" . mc/edit-lines)))
#+end_src

* Dired
** Configuration
Setup =dired= the way I like it.
#+begin_src emacs-lisp :tangle lisp/hooks.el
    (require 'dired-x) ;; enable extra features by default
    (setq insert-directory-program "gls" dired-use-ls-dired t)
    (use-package dired
      :straight nil
      :config
      (setq dired-dwim-target t)
      (setq dired-listing-switches
            "-GFhlva --group-directories-first --time-style=long-iso")
      :hook ((dired-mode-hook . dired-hide-details-mode)
             (dired-mode-hook . (lambda() (display-line-numbers-mode -1)))
             (dired-mode-hook . hl-line-mode)))
#+end_src

Also auto refresh dired, but be quiet about it
#+begin_src emacs-lisp :tangle lisp/hooks.el
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)
#+end_src


Why not icons; we can have all the things
#+begin_src emacs-lisp :tangle lisp/packages.el
  (if (display-graphic-p)
      (use-package nerd-icons-dired
        :hook
        (dired-mode-hook . nerd-icons-dired-mode)))
#+end_src


** Custom Functions

Use "F" to open all marked files in =dired=. Code lifted from [[https://stackoverflow.com/questions/1110118/in-emacs-dired-how-to-find-visit-multiple-files][here]].

#+begin_src emacs-lisp :tangle lisp/hooks.el
(eval-after-load "dired"
  '(progn
     (define-key dired-mode-map "F" 'my-dired-find-file)
     (defun my-dired-find-file (&optional arg)
       "Open each of the marked files, or the file under the point, or when prefix arg, the next N files "
       (interactive "P")
       (let* ((fn-list (dired-get-marked-files nil arg)))
         (mapc 'find-file fn-list)))))
#+end_src

* Debugging: ~dap-mode~
#+begin_src emacs-lisp :tangle lisp/hooks.el
  ;; (use-package dap-mode
  ;;   :custom
  ;;     (dap-auto-configure-features '(sessions locals expressions controls tooltip))
  ;;   :config
  ;;   )
  #+end_src
* Treemacs Add Ons
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package treemacs-icons-dired)

  (dolist (face '(treemacs-root-face
                  treemacs-git-unmodified-face
                  treemacs-git-modified-face
                  treemacs-git-renamed-face
                  treemacs-git-ignored-face
                  treemacs-git-untracked-face
                  treemacs-git-added-face
                  treemacs-git-conflict-face
                  treemacs-directory-face
                  treemacs-directory-collapsed-face
                  treemacs-file-face
                  treemacs-tags-face))
    (set-face-attribute face nil :family "SF Pro" :height 140))
#+end_src

* Projectile
#+begin_src emacs-lisp :tangle lisp/packages.el
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/git")
    (setq projectile-project-search-path '("~/git")))
  (setq projectile-switch-project-action #'projectile-dired))
#+end_src

* Treesitter
See: https://github.com/renzmann/treesit-auto

#+begin_src emacs-lisp :tangle lisp/packages.el
  ;;(straight-use-package 'tree-sitter) 
  ;;(straight-use-package 'tree-sitter-langs)
  (straight-use-package 'treesit-auto)
#+end_src

Language grammars that don't seem to auto install with treesit-auto

#+begin_src emacs-lisp :tangle lisp/packages.el
  (setq treesit-language-source-alist
   '((cmake "https://github.com/uyha/tree-sitter-cmake")
     (elisp "https://github.com/Wilfred/tree-sitter-elisp")
     (json "https://github.com/tree-sitter/tree-sitter-json")
     (make "https://github.com/alemuller/tree-sitter-make")
     (dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile")
     (js-doc "https://github.com/tree-sitter/tree-sitter-jsdoc")
     (markdown "https://github.com/ikatyang/tree-sitter-markdown")))

  ;; install them please - keep commented out because it runs every time
  ;;(mapc #'treesit-install-language-grammar (mapcar #'car treesit-language-source-alist))
#+end_src

#+begin_src emacs-lisp :tangle lisp/hooks.el
    ;;(global-tree-sitter-mode)
    (use-package treesit-auto
      :custom
      (treesit-auto-install 'prompt)
      :config
      ;; prefer web-mode for html for now as it has better mixed syntax support
      (delete 'html treesit-auto-langs)
      ;; this adds the rest to the auto-mode-alist
      (treesit-auto-add-to-auto-mode-alist 'all)
      (global-treesit-auto-mode))

    ;; this fixes a problem where v0.20.4 of this grammar blows up with emacs
    ;;(defvar rh/tsx-treesit-auto-recipe
    ;;  (make-treesit-auto-recipe
    ;;   :lang 'tsx
    ;;   :ts-mode 'tsx-ts-mode
    ;;   :remap '(typescript-tsx-mode)
    ;;   :requires 'typescript
    ;;   :url "https://github.com/tree-sitter/tree-sitter-typescript"
    ;;   :revision "v0.20.3"
   ;;    :source-dir "tsx/src"
   ;;    :ext "\\.tsx\\'")
   ;;   "Recipe for libtree-sitter-tsx.dylib")
    ;;(add-to-list 'treesit-auto-recipe-list rh/tsx-treesit-auto-recipe)

  ;  (defvar rh/typescript-treesit-auto-recipe
  ;    (make-treesit-auto-recipe
  ;     :lang 'typescript
  ;     :ts-mode 'typescript-ts-mode
  ;     :remap 'typescript-mode
  ;     :requires 'tsx
  ;     :url "https://github.com/tree-sitter/tree-sitter-typescript"
  ;     :revision "v0.20.3"
  ;     :source-dir "typescript/src"
  ;     :ext "\\.ts\\'")
  ;    "Recipe for libtree-sitter-typescript.dylib")
    ;;(add-to-list 'treesit-auto-recipe-list rh/typescript-treesit-auto-recipe)
#+end_src

* LSP & Company
** Company
#+begin_src emacs-lisp :tangle lisp/packages.el

  (use-package company
    :custom
    (company-idle-delay 0.0)
    (company-tooltip-align-annotations t)
    (company-minimum-prefix-length 1))
#+end_src

I prefer the more emacs-like "C-n" keybinding for cycling between completion options. Remove "tab" from doing this so as to reserve it for Copilot completion...sigh

#+begin_src emacs-lisp :tangle lisp/keybindings.el
  (define-key company-active-map (kbd "<tab>") nil)
  (define-key company-active-map (kbd "TAB") nil)
#+end_src

** LSP
#+begin_src emacs-lisp :tangle lisp/packages.el
  (defun setup-lsp-mode ()
    (message "setting up lsp mode..."))

  (defun setup-flycheck ()
     (message "setting up flycheck mode...")
     (lsp-diagnostics-flycheck-enable)
     (flycheck-mode)
     (setq-default flycheck-disabled-checkers '(lsp))
     ;; tsserver returns markdown doc for eldoc
     ;; which requires lsp-eldoc-render-all to be fully shown
     (setq-local lsp-eldoc-render-all t)
     (unless (derived-mode-p 'json-mode)
      (flycheck-add-next-checker 'javascript-eslint 'lsp))
     ;; run flycheck on save and on opening a new line
     (setq flycheck-check-syntax-automatically '(save new-line mode-enabled))
     ;; prefer eslint over all checkers if it can be enabled, do it
    (unless (derived-mode-p 'json-mode)
      (flycheck-select-checker 'javascript-eslint))
     (message "using eslint if available")
     ((lambda () (if (flycheck-may-enable-checker 'javascript-eslint)
                     (message "eslint IS available, attempting to set checker")
                  (flycheck-select-checker 'javascript-eslint)))))


  (use-package lsp-mode
    :commands lsp
    :custom
    ;; DISABLED while debugging react prop completion
    ;;(lsp-enable-snippet nil)
    (lsp-enable-flycheck nil)
    :init (setq
           lsp-idle-delay 0.5
           read-process-output-max (* 1024 1024))
     :hook ((lsp-mode-hook . setup-lsp-mode)))
           ;; run flycheck setup so that it gets initialized when first starting the server
           ;; this results in the setup being run twice when opening the first file in a ts/js project

            ;; (lsp-after-initialize-hook . setup-flycheck)))

  (use-package lsp-ui :commands lsp-ui-mode)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
  (use-package helm-lsp :commands helm-lsp-workspace-symbol)
  (use-package helm-xref)
  (use-package yasnippet)
  (use-package avy)
  (use-package hydra)
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package which-key :config (which-key-mode))
  (require 'helm-xref)
  (yas-global-mode)

#+end_src

#+begin_src emacs-lisp :tangle lisp/keybindings.el
;;(define-key global-map [remap find-file] #'helm-find-files)
;;(define-key global-map [remap execute-extended-command] #'helm-M-x)
;;(define-key global-map [remap switch-to-buffer] #'helm-mini)
#+end_src

**** LSP Booster Stuff
See: https://github.com/blahgeek/emacs-lsp-booster

*** LSP UI
[[https://github.com/emacs-lsp/lsp-ui][github]]

#+begin_src emacs-lisp :tangle lisp/modes.el
  ;; hide lsp ui code actions
  ;; (setq lsp-ui-sideline-show-code-actions nil)
#+end_src

* Additional Hooks
** Prog Mode
Set the =prog-mode= hook. =prog-mode= is a major mode provided by Emacs. Typically, it is not used directly, instead many programming-related major modes are derived from this mode. Any hooks defined here will be applied to all modes that derive from it, inluding =js-mode= and more.

#+begin_src emacs-lisp :tangle lisp/hooks.el
(defun hook-prog-mode ()
  "Hook for Prog mode."
  (local-set-key (kbd "C-c <right>") 'hs-show-block)
  (local-set-key (kbd "C-c <left>")  'hs-hide-block)
  (local-set-key (kbd "C-c <up>")    'hs-hide-all)
  (local-set-key (kbd "C-c <down>")  'hs-show-all)
  (hs-minor-mode t))

(add-hook 'prog-mode-hook #'hook-prog-mode)
#+end_src

** Text Mode
Set the =text-mode= hook. We increase the "padding" between line numbers with the linum-format variable.

#+begin_src emacs-lisp :tangle lisp/hooks.el
(defun hook-text-mode ()
  "Hook  for Text mode."
  ;; (linum-mode 1)
  (make-local-variable 'linum-format)
  (setq linum-format " %d "))

(add-hook 'text-mode-hook #'hook-text-mode)
#+end_src

** Ibuffer
I prefer Ibuffer to buffer window. Pretty colors and such. The keybinding =C-b= is overridden to open Ibuffer instead of vanilla buffer window.
#+begin_src emacs-lisp :tangle lisp/hooks.el
(use-package ibuffer
  :config
  (setq ibuffer-expert t)
  (setq ibuffer-display-summary nil)
  (setq ibuffer-use-other-window nil)
  (setq ibuffer-show-empty-filter-groups nil)
  (setq ibuffer-movement-cycle nil)
  (setq ibuffer-default-sorting-mode 'filename/process)
  (setq ibuffer-use-header-line t)
  (setq ibuffer-default-shrink-to-minimum-size nil)
  (setq ibuffer-formats
        '((mark modified read-only locked " "
                (name 30 30 :left :elide)
                " "
                (size 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " " filename-and-process)
          (mark " "
                (name 16 -1)
                " " filename)))
  (setq ibuffer-saved-filter-groups nil)
  (setq ibuffer-old-time 48)
  :hook ((ibuffer-mode-hook . (lambda() (display-line-numbers-mode -1)))
  (ibuffer-mode-hook . auto-revert-mode)))


#+end_src

** Line numbers
Disable line numbers for the following modes regardless of global setting
#+begin_src emacs-lisp :tangle lisp/hooks.el
 (dolist (mode '(org-mode-hook
                 org-agenda-mode-hook
                 treemacs-mode-hook
                 term-mode-hook
                 eshell-mode-hook
                 shell-mode-hook
                 image-mode-hook
                 helm-mode-hook
                 markdown-mode-hook))
   (add-hook mode (lambda() (display-line-numbers-mode -1))))
#+end_src

Opt in line numbers on these modes regardless of global setting
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (dolist (mode '(dockerfile-mode-hook))(add-hook mode (lambda() (display-line-numbers-mode 1))))
#+end_src

** SmartParens
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (use-package smartparens)
#+end_src

* Languages
** Code Formatting
*** Prettier
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package prettier
    :defer)
#+end_src

** Emacs Lisp
#+begin_src emacs-lisp :tangle lisp/hooks.el
#+end_src

** HTML
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package web-mode
  :mode
  (("\\.html\\'" . web-mode)
   ("\\.php\\'" . web-mode)))

  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-enable-current-column-highlight t)
#+end_src

#+begin_src emacs-lisp :tangle lisp/hooks.el
  (defun setup-html-mode ()
    (interactive)
    (company-mode)
    (prettier-mode)
    (lsp))

  (add-hook 'web-mode-hook #'setup-html-mode)
#+end_src

** NodeJs
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package add-node-modules-path)
  (setq add-node-modules-path-command "echo \"$(npm root)/.bin\"")
  ;;(use-package add-node-modules-path
  ;;  :custom
  ;;  (add-node-modules-path-command '("npm root")))

  ;;(use-package prettier-js)
#+end_src


** CSS

#+begin_src emacs-lisp :tangle lisp/hooks.el
  (defun setup-css-mode ()
    (interactive)
    (prettier-mode)
    (company-mode))

  (add-hook 'css-ts-mode-hook #'setup-css-mode)
#+end_src

** JavaScript

Testing out lsp-tailwindcss
#+begin_src emacs-lisp :tangle lisp/packages.el
;;  (straight-use-package
;;   '(lsp-tailwindcss :type git :host github :repo "merrickluo/lsp-tailwindcss"))
#+end_src

#+begin_src emacs-lisp :tangle lisp/packages.el
  ;;(straight-use-package
  ;; `(lsp-biome :type git :host github :repo "cxa/lsp-biome"))
#+end_src

#+begin_src emacs-lisp :tangle lisp/modes.el

  ;; Make it so all '.js' files auto load 'js-mode'
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js-ts-mode))

  ;; Make it so all '.jsx' files auto load 'js-jsx-mode'
  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . js-jsx-mode))

  ;; Make it so all '.html' files auto load html-mode'
  (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
  ;; (add-to-list 'auto-mode-alist '("\\.html\\'" . html-ts-mode))

  ;; Use 2 spaces when tabbing HTML elements
  (setq-default sgml-basic-offset 2)

  ;; Use 2 spaces when tabbing JS elements
  (setq-default js-indent-level 2)

  ;; Indent switch statements normally
  (setq js2-indent-switch-body t)
#+end_src

#+begin_src emacs-lisp :tangle lisp/hooks.el

  (defun setup-js-ts-mode ()
    ;; json-mode runs js-mode hooks so don't run
    (interactive)
    (unless (derived-mode-p 'json-ts-mode)
    (message "Setting up js/ts mode")
    (lsp)
    (require 'lsp-diagnostics)
    (add-node-modules-path)
    (prettier-mode)
    (smartparens-mode)
    (eldoc-mode +1)
    (setq lsp-disagnostics-provider :none)))
    ;;(setup-flycheck)))


  (add-hook 'js-ts-mode-hook #'setup-js-ts-mode)
  (add-hook 'js-jsx-mode-hook #'setup-js-ts-mode)
  (add-hook 'typescript-ts-mode-hook #'setup-js-ts-mode)
  (add-hook 'tsx-ts-mode-hook #'setup-js-ts-mode)
#+end_src

** TypeScript
#+begin_src emacs-lisp :tangle lisp/packages.el

  ;; (use-package typescript-mode)

  ;; tsx-mode
  ;; install deps
  ;;(use-package coverlay)
  ;;(use-package origami)
  ;;(straight-use-package '(css-in-js-mode :type git :host github :repo "orzechowskid/tree-sitter-css-in-js"))
  ;;(straight-use-package '(tsx-mode :type git :host github :repo "orzechowskid/tsx-mode.el"))

#+end_src


#+begin_src emacs-lisp :tangle lisp/modes.el
  ;; Make it so all '.ts' files auto load 'typescript-mode'
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-ts-mode))

  ;; Make it so all '.tsx' files auto load 'typescript-mode'
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . tsx-ts-mode))

  ;; Use 2 spaces when tabbing TS elements
  (setq-default typescript-indent-level 2)
#+end_src

** Go
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package go-mode)
#+end_src


#+begin_src emacs-lisp :tangle lisp/modes.el
  (add-to-list 'auto-mode-alist '("\\.go\\'" . go-ts-mode))
#+end_src


#+begin_src emacs-lisp :tangle lisp/hooks.el
  (defun setup-go-mode ()
    (message "Setting up go mode")
    (interactive)
    (lsp)
    (eldoc-mode +1)
    ;; set tab-width
    (lambda ()
      (setq-default)
      (setq tab-width 2)
      (setq standard-indent 2)
      (setq indent-tabs-mode nil))
    ((lambda () (flycheck-select-checker 'go-gofmt)))
    (setq lsp-disagnostics-provider :none))


  (add-hook 'go-ts-mode-hook #'setup-go-mode)


  ;; Set up before-save hooks to format buffer and add/delete imports.
  ;; Make sure you don't have other gofmt/goimports hooks enabled.
  (defun lsp-go-install-save-hooks ()
     (add-hook 'before-save-hook #'lsp-format-buffer t t)
     (add-hook 'before-save-hook #'lsp-organize-imports t t))

  (add-hook 'go-ts-mode-hook #'lsp-go-install-save-hooks)

#+end_src

** Rust
See:
- https://robert.kra.hn/posts/rust-emacs-setup/
- https://rust-analyzer.github.io/manual.html#emacs

#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package rust-mode
    :hook (rust-ts-mode-hook . lsp))

  (defun lsp-rust-install-save-hooks ()
     (add-hook 'before-save-hook #'lsp-format-buffer t t)
     (add-hook 'before-save-hook #'lsp-organize-imports t t))

  (add-hook 'rust-ts-mode-hook #'lsp-rust-install-save-hooks)
#+end_src

** Python
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package python-mode
    :hook (python-ts-mode-hook . (lambda ()
                                   (pyenv-mode-set "3.12.5")
                                   (eglot-ensure)
                                   (company-mode))))

  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs
                 '(python-ts-mode . ("pyenv" "exec" "poetry" "run" "pyright-langserver" "--stdio"))))

  (use-package pyenv-mode
    :hook (python-ts-mode-hook . pyenv-mode))

  (use-package poetry
    :ensure t)
#+end_src

#+begin_src emacs-lisp :tangle lisp/modes.el
  (add-to-list 'auto-mode-alist '("\\.py\\'" . python-ts-mode))
#+end_src

** Flycheck
[[https://www.flycheck.org/manual/latest/index.html][Flycheck Manual]]

#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package flycheck
    :defer
    :init
    (add-hook 'flycheck-mode-hook #'rh/setup-clippy-for-rust
    (add-hook 'flycheck-mode-hook #'rh/setup-eslint-for-js-ts)))

  (defun rh/setup-eslint-for-js-ts ()
    "Set up ESLint for JavaScript and TypeScript files."
    (when (derived-mode-p 'js-mode 'js2-mode 'typescript-mode)
      (setq-local flycheck-disabled-checkers '(lsp))
      (rh/use-eslint-from-node-modules)))
    
    (defun rh/use-eslint-from-node-modules ()
      "Set the local ESLint executable and configuration for Flycheck."
      ;; Note that only works for .eslintrc.js files
      (let* ((root (locate-dominating-file
                    (or (buffer-file-name) default-directory)
                    "node_modules/eslint"))
             (eslint (and root
                          (expand-file-name "node_modules/.bin/eslint" root)))
             (eslint-config (and root
                                 (expand-file-name ".eslintrc.js" root))))
        (when (and eslint (file-executable-p eslint))
          (setq-local flycheck-javascript-eslint-executable eslint))
        (when (and eslint-config (file-exists-p eslint-config))
          (setq-local flycheck-eslint-args (list "--config" eslint-config)))
        ;; HACK: Delay checker selection to ensure Flycheck is fully initialized
        (run-at-time "0.08 sec" nil (lambda ()
                                     (flycheck-select-checker 'javascript-eslint)
                                     (flycheck-buffer)))))



  (defun rh/setup-clippy-for-rust ()
  "Set up Flycheck to use cargo-clippy for Rust files."
  (when (derived-mode-p 'rust-mode 'rust-ts-mode)
    ;; Disable the LSP checker for Rust
    (setq-local flycheck-disabled-checkers '(lsp))
    ;; Delay the selection of cargo-clippy to ensure Flycheck is ready
    (run-at-time "0.08 sec" nil (lambda ()
                                  (flycheck-select-checker 'rust-clippy)
                                  (flycheck-buffer)))))
#+end_src


** JSON
#+begin_src emacs-lisp :tangle lisp/packages.el
  (defun setup-json-mode ()
    (message "Setting up json mode")
    (interactive)
    ;(flycheck-select-checker 'json-python-json)
    (prettier-mode))

  (use-package json-ts-mode)
  (add-hook 'json-ts-mode-hook #'setup-json-mode)
#+end_src

** YAML
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package yaml-mode)
  (add-to-list 'auto-mode-alist '("\\.ya?ml\\'" . yaml-mode))
#+end_src

#+begin_src emacs-lisp :tangle lisp/packages.el
#+end_src

** Docker
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package dockerfile-mode)
#+end_src

** JenkinsFile
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package jenkinsfile-mode)
#+end_src

** Rego
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package rego-mode)
#+end_src

** Markdown
Define a function =my-markdown-preview= for conveniently previewing markdown files in the GitHub style.

#+begin_src emacs-lisp :tangle lisp/hooks.el
  ;; this is not working
  ;;(add-hook 'markdown-mode-hook '((set-window-margins (get-buffer-window) 10 10)))
#+end_src

#+begin_src emacs-lisp :tangle lisp/hooks.el
    (setq markdown-preview-stylesheets (list "~/github-markdown.css"))

    (use-package markdown-mode
      :mode ("\\.md\\'" . gfm-mode)
      :commands (markdown-mode gfm-mode)
      :config (setq markdown-command "pandoc -t html5"))
      ;;(setq markdown-command "markdown"))

    (use-package simple-httpd
      :config
      (setq httpd-port 7070)
      (setq httpd-host (system-name)))

    (use-package impatient-mode
      :commands impatient-mode)

    (defun my-markdown-filter (buffer)
      (princ
       (with-temp-buffer
         (let ((tmp (buffer-name)))
           (set-buffer buffer)
           (set-buffer (markdown tmp))
           (format "<!DOCTYPE html><html><title>Markdown preview</title><link rel=\"stylesheet\" href = \"https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/5.1.0/github-markdown.min.css\"/>
    <body><article class=\"markdown-body\" style=\"box-sizing: border-box;min-width: 200px;max-width: 980px;margin: 0 auto;padding: 45px;\">%s</article></body></html>" (buffer-string))))
       (current-buffer)))


  (defun my-imp-visit-buffer ()
  "Visit the buffer in a browser."
  (interactive)
  (browse-url
  (format "http://localhost:%d/imp/live/%s/"
  httpd-port (url-hexify-string (buffer-name)))))


    (defun rh/markdown-preview ()
      "Preview markdown."
      (interactive)
      (unless (process-status "httpd")
        (httpd-start))
      (impatient-mode)
      (imp-set-user-filter 'my-markdown-filter)
      ;;(my-imp-visit-buffer))
      (imp-visit-buffer))
#+end_src



* GitHub Copilot
Install dependencies and package
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package editorconfig)
  (use-package jsonrpc)
  (use-package copilot
    :straight (:host github :repo "copilot-emacs/copilot.el" :files ("*.el"))
    :defer t
    :config (define-key copilot-mode-map (kbd "TAB") 'copilot-accept-completion))
#+end_src

Enable copilot when prog mode is on (disabled)
#+begin_src emacs-lisp :tangle lisp/hooks.el
  ;; (add-hook 'prog-mode-hook 'copilot-mode)
#+end_src

Use Enter for accepting completions
#+begin_src emacs-lisp :tangle lisp/keybindings.el
  ;; (define-key copilot-mode-map (kbd "TAB") 'copilot-accept-completion)
  ;; (define-key copilot-completion-map (kbd "M-s-p") 'copilot-accept-completion)
#+end_src

copilot chat
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package copilot-chat
  :straight (:host github :repo "chep/copilot-chat.el" :files ("*.el"))
  :after (request))
#+end_src

* Org Mode
** Default Settings
- Follow links
- Associate all org files with org mode
- Activate =org-indent-mode= nicer indents
- Activate =visual-line-mode= for readability
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (setq org-return-follows-link t)
  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
  (add-hook 'org-mode-hook 'org-indent-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)

  ;; Ellipsis styling
  (setq org-ellipsis "…")
  (set-face-attribute 'org-ellipsis nil :inherit 'default :box nil)
#+end_src

** Org Eval
Don't ask for confirmation when evaluating code blocks. Could be changed to a function that returns bool with more complex logic if desired.
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (setq org-confirm-babel-evaluate 'nil)
#+end_src

** Visual Settings
Set maximum indentation for description lists
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (setq org-list-description-max-indent 5)
#+end_src

Hide emphasis markup (e.g. /.../ for italics, *...* for bold, etc.)
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (setq org-hide-emphasis-markers t)
  (setq org-pretty-entities t)
#+end_src


#+begin_src emacs-lisp :tangle lisp/hooks.el
  (setq
   ;; Edit settings
   org-auto-align-tags nil
   org-tags-column 0
   org-catch-invisible-edits 'show-and-error
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t)
#+end_src

Visual fill mode, visual fill column mode settings
#+begin_src emacs-lisp :tangle lisp/hooks.el
  ;; set up display of org mode docs
  (defun org-mode-visual-fill ()
    (setq visual-fill-column-width 160
          visual-fill-column-center-text t
          visual-fill-column-mode 1))

  (use-package visual-fill-column
    :defer t
    :hook (org-mode-hook . org-mode-visual-fill))
#+end_src

** Org-Capture
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (setq org-directory "~/org")
  (setq org-default-notes-file "~/org/refile.org")

  (setq org-refile-targets '((org-agenda-files :maxlevel . 1)))

  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes 'confirm)

  ;; I use C-c c to start capture mode
  (global-set-key (kbd "C-c c") 'org-capture)

  ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
  (setq org-capture-templates
        (quote (("g" "General To-Do"
                 entry (file+headline "~/org/todos.org" "General Tasks")
                 "* TODO [#B] %?\n:Created: %T\n "
                 :empty-lines 0)
                ("j" "Work Log Entry"
                 entry (file+datetree "~/org/log.org")
                 "* %?"
                 :empty-lines 0)
                ("n" "Note"
                 entry (file+headline "~/org/notes.org" "Notes")
                 "** %?"
                 :empty-lines 0)
                ("q" "Question"
                 entry (file+headline "~/org/questions.org" "General Question")
                 "* QUESTION %?\n:Created: %T\n Answer: "
                 :empty-lines 0)
                ("c" "Code To-Do"
                 entry (file+headline "~/org/todos.org" "Code Related Tasks")
                 "* TODO [#B] %?\n;; :Created: %T\n%i\n%a\nProposed Solution: "
                 :empty-lines 0)
                ("m" "Meeting"
                 entry (file+datetree "~/org/meetings.org")
                 "* %? :meeting:%^g \n:Created: %T\n** Attendees\n*** \n** Notes\n** Action Items"
                 :tree-type week
                 :clock-in t
                 :clock-resume t
                 :empty-lines 0)
                ("t" "Ticket"
                 entry (file+headline "~/org/tickets.org" "Tickets")
                 "* TODO [#B] %? %^g\nCreated: %T\n** Jira Link: \n** Notes\n** Status\n - [ ] Research\n - [ ] PR\n - [ ] Verifying\n** Subtasks"
                 :empty-lines 0)
                ("p" "Sprint"
                 entry (file "~/org/sprints.org" )
                 "** Kraken Sprint %?\n:Created: %T\nSCHEDULED: %T\nDEADLINE: %T\n*** GOAL\n*** Notes\n*** Review\n*** Planning\n*** Retrospective "))))
#+end_src

** Tags
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (setq org-tag-alist '(
                        ;; Ticket types
                        (:startgroup . nil)
                        ("@bug" . ?b)
                        ("@story" . ?u)
                        ("@spike" . ?j)
                        (:endgroup . nil)

                        ;; Ticket flags
                        ("@write_ticket" . ?w)

                        ;; Meeting types
                        (:startgroup . nil)
                        ("dsu" . ?d)
                        ("scrum" . ?g)
                        (:endgroup . nil)

                        ;; Code TODOs tags
                        (:startgroup . nil)
                        ("backend" . ?k)
                        ("ui" . ?f)
                        (:endgroup . nil)

                        ;; Special tags
                        ("CRITICAL" . ?y)
                        ("obstacle" . ?o)

                        ;; Meeting tags
                        ("HPE" . ?h)
                        ("LEAP" . ?z)
                        ("mark" . ?0)
                        ("kalki" . ?7)
                        ("cox" . ?9)
                        ("CDS" . ?l)
                        ("meeting" . ?m)

                        ;; Work Log Tags
                        ("accomplishment" . ?a)))
#+end_src

#+begin_src emacs-lisp :tangle lisp/hooks.el
(setq org-tag-faces
      '(
        ("planning"  . (:foreground "mediumPurple1" :weight bold))
        ("LEAP"      . (:foreground "royalblue1"    :weight bold))
        ("ui"        . (:foreground "forest green"  :weight bold))
        ("testing"   . (:foreground "sienna"        :weight bold))
        ("meeting"   . (:foreground "yellow1"       :weight bold))
        ("CRITICAL"  . (:foreground "red1"          :weight bold))
        ))
#+end_src

** Org Plot

See: https://thearjunmdas.github.io/entries/plot-graphs-in-emacs-org-mode/

=gnuplot= binary must be installed for these to work: https://formulae.brew.sh/formula/gnuplot

#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package gnuplot)
  (use-package gnuplot-mode)
#+end_src

** Org Agenda
#+begin_src emacs-lisp :tangle lisp/hooks.el
  ;; (setq org-agenda-files (quote ("~/org/notes.org"
  ;;                                "~/org/todos.org"
  ;;                                "~/org/dev-adv.org"
  ;;                                "~/org/log.org"
  ;;                                "~/org/leap.org"
  ;;                                "~/org/sprints.org"
  ;;                                "~/org/tickets.org"
  ;;                                "~/org/meetings.org")))

  (setq org-agenda-files '("~/org"))
  (setq org-agenda-sticky t)
  (setq org-agenda-inhibit-startup nil)
  (setq org-agenda-window-setup "other-tab")

  ;; Compact the block agenda view (disabled)
  (setq org-agenda-compact-blocks nil)
  (setq org-deadline-warning-days 10)

  ;; (setq org-agenda-custom-commands
  ;;       '(("W" "Weekly Review"
  ;;          ((agenda "" ((org-agenda-span 7)))
  ;;           (todo "GOAL"
  ;;                 ((org-agenda-overriding-header "Sprint Goals")))
  ;;           (todo "KAIZEN"
  ;;                 ((org-agenda-overriding-header "Kaizen")))
  ;;           (todo "TODO|IN PROGRESS"
  ;;                 ((org-agenda-overriding-header "My Todos")))
  ;;           (todo "TASK"
  ;;                 ((org-agenda-overriding-header "Team Tasks")))
  ;;           ))))
#+end_src


*** Custom Agenda Commands
#+begin_src emacs-lisp :tangle lisp/hooks.el
    ;; Agenda View "d"
    (defun air-org-skip-subtree-if-priority (priority)
      "Skip an agenda subtree if it has a priority of PRIORITY.

      PRIORITY may be one of the characters ?A, ?B, or ?C."
      (let ((subtree-end (save-excursion (org-end-of-subtree t)))
            (pri-value (* 1000 (- org-lowest-priority priority)))
            (pri-current (org-get-priority (thing-at-point 'line t))))
        (if (= pri-value pri-current)
            subtree-end
          nil)))

    (setq org-agenda-skip-deadline-if-done t)

    ;; Agenda View "d"
  (defun air-org-skip-subtree-if-priority (priority)
    "Skip an agenda subtree if it has a priority of PRIORITY.

    PRIORITY may be one of the characters ?A, ?B, or ?C."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 1000 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
          subtree-end
        nil)))

  (setq org-agenda-skip-deadline-if-done t)

  (setq org-agenda-custom-commands
        '(
          ;; Daily Agenda & TODOs
          ("d" "Daily agenda and all TODOs"

           ;; Display items with priority A
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority Todos:")))

            ;; View 7 days in the calendar view
            ;; (agenda "" ((org-agenda-span 5)))

            ;; Display items with priority B (really it is view all items minus A & C)
            (todo "TODO"
                     ((org-agenda-skip-function '(or (air-org-skip-subtree-if-priority ?A)
                                                     (air-org-skip-subtree-if-priority ?C)
                                                     (org-agenda-skip-if nil '(scheduled deadline))))
                      (org-agenda-overriding-header "ALL normal priority tasks:")))

            ;; Display items with pirority C
            (tags "PRIORITY=\"C\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Low-priority Unfinished tasks:")))

            (todo "TASK|GAP"
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Tasks and Organizational Gaps:")))

            (todo "QUESTION"
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Questions needing Answers")))


            ) ;; end agenda sections



           ;; Don't compress things (change to suite your tastes)
           ((org-agenda-compact-blocks nil)))
          ))

#+end_src

** Todo states
#+begin_src emacs-lisp :tangle lisp/hooks.el

  (setq org-todo-keywords
        '((sequence "TODO(t)" "IN PROGRESS(i@/!)" "BLOCKED(b@)" "|" "DONE(d!)" "WONT-DO(w@/!)")
          (sequence "TASK(f)"  "GAP(p)" "|" "OBE(w@/!)" "DONE(d)")
          (sequence "KAIZEN(k)"  "|" "DONE(d)")
          (sequence "QUESTION(q)"  "|" "ANSWERED(a)")
          (sequence "GOAL(g)" "|" "DELIVERED(y!)")))

  (setq org-todo-keyword-faces
        '(("TODO" . (:foreground "DarkOrange1" :weight bold))
          ("IN PROGRESS" . (:foreground "sea green"))
          ("PLANNING" . (:foreground "DeepPink" :weight bold))
          ("BLOCKED" . (:foreground "Red" :weight bold))
          ("DONE" . (:foreground "light sea green"))
          ("TASK" . (:foreground "magenta"))
          ("QUESTION" . (:foreground "maroon2"))
          ("GAP" . (:foreground "IndianRed1"))))
#+end_src

** Visual settings

Define headline fonts, disabled for now...TODO [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/]]
#+begin_src emacs-lisp :tangle lisp/hooks.el

  ;; (let* ((variable-tuple
  ;;          (cond ((x-list-fonts "Optima Regular")  '(:font "Optima Regular"))
  ;;                ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
  ;;                ((x-list-fonts "Verdana")         '(:font "Verdana"))
  ;;                ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
  ;;                (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
  ;;         (base-font-color     (face-foreground 'default nil 'default))
  ;;         (headline           `(face-foreground 'default nil 'default)))

  ;;    (custom-theme-set-faces
  ;;     'user
  ;;     `(org-level-8 ((t (,@headline ,@variable-tuple))))
  ;;     `(org-level-7 ((t (,@headline ,@variable-tuple))))
  ;;     `(org-level-6 ((t (,@headline ,@variable-tuple))))
  ;;     `(org-level-5 ((t (,@headline ,@variable-tuple))))
  ;;     `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.03))))
  ;;     `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.05))))
  ;;     `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.07))))
  ;;     `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.1))))
  ;;     `(org-document-title ((t (,@headline ,@variable-tuple :height 1.2 :underline nil))))))

  ;; '(variable-pitch ((t (:family "ETBembo" :height 180 :weight thin))))
  ;; '(fixed-pitch ((t ( :family "Fira Code Retina" :height 160)))))

  ;; (add-hook 'org-mode-hook 'variable-pitch-mode)
#+end_src

** Org Modern
#+begin_src emacs-lisp :tangle lisp/packages.el
    ;; (use-package org-bullets
    ;; ;  :after org
    ;; ;  :hook (org-mode . org-bullets-mode)
    ;;   :custom
    ;;   (org-bullets-bullet-list '("⁖" "◉" "○" "✸" "✿")))

  (use-package org-modern
    :straight (org-modern :type git :flavor melpa :host github :repo "minad/org-modern" :commit 63372bda43a9d0dd9940c1ec3c53f752b642ac41))
  (setq org-modern-star "replace")
  (with-eval-after-load 'org (global-org-modern-mode))
#+end_src

** Bootstrap Org
#+begin_src emacs-lisp :tangle lisp/hooks.el
  ;; (add-hook 'org-mode-hook)
#+end_src

** PlantUML
#+begin_src emacs-lisp :tangle lisp/hooks.el
   (use-package plantuml-mode)

   (setq plantuml-output-type "png")
   (setq org-plantuml-jar-path "~/plantuml.jar")
   (setq plantuml-jar-path "~/plantuml.jar")
   (setq plantuml-default-exec-mode 'jar)

   ;; Make it so all '.puml' files auto load 'plantuml-mode'
   (add-to-list 'auto-mode-alist '("\\.puml\\'" . plantuml-mode))
#+end_src

** Org Babel Language Support
#+begin_src emacs-lisp :tangle lisp/hooks.el
   ;; load language support
   (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)
      (shell . t)
      (js . t)
      (plantuml . t)
      ))
#+end_src

** Org Mode Custom Keybindings
macOS swallows certain keybindings in terminal mode. Redfining the most important ones to me here
#+begin_src emacs-lisp :tangle lisp/keybindings.el
(global-set-key (kbd "C-c y") 'org-insert-structure-template)
#+end_src


** Org JIRA
Install
#+begin_src emacs-lisp :tangle lisp/packages.el
  ;;(use-package org-jira)
#+end_src

Set the Org JIRA base URL and authenticate
#+begin_src emacs-lisp :tangle lisp/hooks.el
  ;; Uncomment next two lines to debug connection issues w/ JIRA
  ;;(setq request-log-level 'blather)
  ;;(setq request-message-level 'blather)

  ;;(setq jiralib-url "https://nimblejira.nimblestorage.com")

  ;; pull token from .authinfo
  ;;(setq jiralib-token
  ;;      (cons "Authorization"
  ;;            (concat "Bearer " (auth-source-pick-first-password
  ;;                :host "nimblejira.nimblestorage.com"))))
#+end_src

Custom JIRA Queries
#+begin_src emacs-lisp :tangle lisp/hooks.el
  ;;(setq org-jira-custom-jqls
  ;;  '(
  ;;    (:jql " assignee = currentUser() AND (status = \"To Do\" OR status = \"In Progress\") order by updated DESC "
  ;;          :limit 100
  ;;          :filename "my-open-issues")))
#+end_src

Define how tickets progress
#+begin_src emacs-lisp :tangle lisp/hooks.el
  ;(defconst org-jira-progress-issue-flow
  ;'(("To Do" . "In Progress"
  ;  ("In Progress" . "Done"))))
#+end_src

* Custom Interface Interactions
#+begin_src emacs-lisp :tangle lisp/common.el
  (defun rh-reload-emacs-init ()
    (interactive)
    (load-file "~/.emacs.d/init.el"))
#+end_src

* vTerm
- vTerm
- vterm-toggle: [[https://github.com/jixiuf/vterm-toggle]]
- multi-vterm: https://github.com/suonlight/multi-vterm
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package vterm
    :straight (:post-build ((setq vterm-always-compile-module t)
                            (require 'vterm)))
    ;;:init ;;(setq
           ;;vterm-kill-buffer-on-exit t
           ;;vterm-max-scrollback 10000
           ;;vterm-min-window-width 40)
    :commands (vterm vterm-other-window))

  (use-package vterm-toggle
      :defer)
    ;; (use-package multi-vterm)
#+end_src

#+begin_src emacs-lisp :tangle lisp/keybindings.el
  (global-set-key (kbd "<f9>") 'vterm-toggle)
  (global-set-key (kbd "C-<f9>") 'vterm-toggle-cd)
#+end_src


* Custom Commands
Here are little commands/macros that kind of thing that keep me more productive

#+begin_src emacs-lisp :tangle lisp/commands.el
  (defun rh/kill-buffer-and-window ()
  "Kill the current buffer and close its window if it's not the only window in the frame."
   (interactive)
   (let ((window (selected-window)))
     (kill-buffer)
     (when (> (count-windows) 1)
       (delete-window window))))

   ;; replace kill-buffer keybinding
   ;; (global-set-key (kbd "C-x k") 'rh/kill-buffer-and-window)
#+end_src

* Experiments
Here are packages and things I'm experimenting with...

** Spacious Padding
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package spacious-padding
    :if (display-graphic-p))
#+end_src

** Beframed
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package beframe)

  (setq beframe-global-buffers '("*scratch*" "*Messages*" "*Backtrace*"))

  (beframe-mode 1)

  (define-key global-map (kbd "C-c C-b") #'beframe-prefix-map)
#+end_src
* Bootstrap
We create a bootstrap file to load all the lisp files that were generated by the code blocks above


#+begin_src emacs-lisp :tangle emacs.el
  (add-to-list 'load-path "~/.emacs.d/lisp")
  (load-library "common")
  (load-library "packages")
  (load-library "modes")
  (load-library "hooks")
  (load-library "keybindings")
  (load-library "commands")
#+end_src

* Finally
#+begin_quote
All we can do is try.
#+end_quote
